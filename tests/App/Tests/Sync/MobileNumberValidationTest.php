<?php

namespace App\Tests\Sync;

use CeculaSyncApiClient\RecipientValidator;
use CeculaSyncApiClient\RecipientValidatorTest;
use PHPUnit\Framework\TestCase;

class MobileNumberValidationTest extends TestCase
{
    private RecipientValidator $mobileNumberValidator;
    public function setUp(): void
    {
//        parent::setUp(); // TODO: Change the autogenerated stub
        $this->mobileNumberValidator = new RecipientValidator();
    }

    /**
     * @param $sampleNumber
     * @dataProvider sampleShortNigerianNumbers
     * @test
     */
    public function canWillRecognizeAndConvertNigerianNumbers($sampleNumber): void
    {
        self::assertTrue(
            sprintf("%s%s",substr($this->mobileNumberValidator->rewriteNigerianNumberOrReturnDefault($sampleNumber), 0, 3)
                ,substr($sampleNumber,1,1)) === "234".substr($sampleNumber,1,1)
        );
    }

    /**
     * @return \string[][]
     */
    public function sampleShortNigerianNumbers(): array
    {
        return [
            ['08183172770'],
            ['07183172770'],
            ['09183172770'],
            ['0818 317 2770'],
            ['0818.317.2770'],
            ['0818-317-2770'],
        ];
    }

    /**
     * @test
     * @dataProvider sampleNonShortNigerianNumbers
     * @param $sampleNumber
     */
    public function shortNigerianNumberRewriterWillNotOverwriteOtherNumbers($sampleNumber): void
    {
        self::assertTrue($this->mobileNumberValidator->rewriteNigerianNumberOrReturnDefault($sampleNumber) === $sampleNumber);
    }

    public function sampleNonShortNigerianNumbers(): array
    {
        return [
            ['8183172770'],
            ['2347183172770'],
            ['9183172770'],
            ['00917189093232']
        ];
    }

    /**
     * @test
     * @dataProvider supplyTooLongNigerianNumbers
     * @param $sampleNumber
     */
    public function recognizesInvalidNigerianNumbers($sampleNumber): void
    {
        self::assertTrue($this->mobileNumberValidator->isInvalidNigerianNumber($sampleNumber));
    }

    public function supplyTooLongNigerianNumbers(): array
    {
        return [
            ["234818317277012"],
            ["234818317277013"],
            ["234818317277"],
        ];
    }

    /**
     * @test
     * @param $multipleNumbers
     * @dataProvider generateValidMultipleNumbers
     */
    public function canDetectValidCommaDelimitedCollectionOfRecipients($multipleNumbers): void
    {
        self::assertTrue($this->mobileNumberValidator->validateAll($multipleNumbers));
    }

    public function generateValidMultipleNumbers(): array
    {
        return [
            ["08183172770,2348026100614,08050209035,0818317277"]
        ];
    }

    /**
     * @param $mulipleNumbers
     * @test
     * @dataProvider generateinvalidMultipleNumbers
     */
    public function throwsExceptionWhenInvalidNumbersAreContainedInRecipientList($multipleNumbers): void
    {
        // self::assertStringContainsString("The following numbers are invalid", $this->mobileNumberValidator->validateAll($multipleNumbers));
        self::expectException(\Exception::class);
        $this->mobileNumberValidator->validateAll($multipleNumbers);
    }

    public function generateInvalidMultipleNumbers(): array
    {
        return [
            ["081831727701,23480261006144,080502090355"],
            ["0098276348732234234"]
        ];
    }

//    public function removesPlusPrefixFromMobileNumber(): void
//    {
//
//    }
}
